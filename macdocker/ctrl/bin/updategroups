#!/bin/bash
curlcmd="curl -s http://keystore:2379/v2/keys"

echo "Updating group list"

repodir="/ctrl/repo"
repodata="$repodir/data"
cfgfile="$repodir/config/default.json"
cfgtmp="$repodir/config/.build"
cd $repodata


# Generate new configuration to map 
# requests to the appropriate repository
#
GETGROUPS="$($curlcmd/groups/)"
MYREPOS=($(jq -r '.node.nodes[]?.key' <<< "${GETGROUPS}"))
repocount=${#MYREPOS[@]}
(( repocount-- ))

cat > $cfgfile <<EOF
{
  "server": {
  "host": "slapi",
    "port": 4000
  },
  "proxy": {
    "timeout": 9000,
    "disable": false
  },
  "cache": {
    "dataRoot": "data",
    "touchFiles": true 
  },
  "mappings": {
EOF
    for (( a=0; a<${#MYREPOS[@]}; a++ )) ; do
        getrepokey="${MYREPOS[$a]}"
        getrepo="$(echo ${MYREPOS[$a]} | cut -d '/' -f 3)"
        if [ $? -ne 0 ] ; then
          continue
        else
        if [ ! -d ${repodata}/$getrepo ] ; then
        mkdir -p ${repodata}/$getrepo/GET
        mkdir -p ${repodata}/$getrepo/POST
        fi
cat >> $cfgfile <<EOF
    "${getrepo}": {
        "host": "http://slapi/${getrepo}",
        "mappingDir": "${getrepo}",
        "matchHeaders": false,
        "noproxy": true,
        "nocache": false
EOF
if [ $a -eq $repocount ] ; then
cat >> $cfgfile <<EOF
    }
EOF
else
cat >> $cfgfile <<EOF
    },
EOF
        fi
fi

done

#if [ $repocount -eq 0 ] ; then
#cat >> $cfgfile <<EOF
#}
#EOF
#else
cat >> $cfgfile <<EOF
  }
}
EOF

#mv -f $cfgtmp $cfgfile
#fi



# return to api root start 
# and start api mocking server
# to service requests
#
#etcdctl --endpoints http://core.east1:2379 set msgbus/slapi "$(date) | $(hostname) | $0 API MAPPING $getrepo " &>/dev/null
#cd $repodir
#npm start